<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="10" passed="9">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="5577" started-at="2017-03-09T18:15:36Z" finished-at="2017-03-09T18:15:41Z">
    <groups>
      <group name="writeTest">
        <method signature="FileStorageTest.writeExistedFileTest()[pri:0, instance:FileStorageTest@7dc36524]" name="writeExistedFileTest" class="FileStorageTest"/>
        <method signature="FileStorageTest.writeSingleFileNotEnoughSpaceTest()[pri:0, instance:FileStorageTest@7dc36524]" name="writeSingleFileNotEnoughSpaceTest" class="FileStorageTest"/>
        <method signature="FileStorageTest.writeSingleFileTest()[pri:0, instance:FileStorageTest@7dc36524]" name="writeSingleFileTest" class="FileStorageTest"/>
      </group> <!-- writeTest -->
    </groups>
    <test name="Test With Classes" duration-ms="5577" started-at="2017-03-09T18:15:36Z" finished-at="2017-03-09T18:15:41Z">
      <class name="FileStorageTest">
        <test-method status="PASS" signature="writeExistedFileTest()[pri:0, instance:FileStorageTest@7dc36524]" name="writeExistedFileTest" duration-ms="1813" started-at="2017-03-09T21:15:36Z" finished-at="2017-03-09T21:15:38Z">
          <exception class="exception.FileAlreadyExistsException">
            <full-stacktrace>
              <![CDATA[exception.FileAlreadyExistsException
	at FileStorage.write(FileStorage.java:20)
	at FileStorageTest.writeExistedFileTest(FileStorageTest.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:54)
	at org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:44)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- exception.FileAlreadyExistsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- writeExistedFileTest -->
        <test-method status="PASS" signature="writeSingleFileNotEnoughSpaceTest()[pri:0, instance:FileStorageTest@7dc36524]" name="writeSingleFileNotEnoughSpaceTest" duration-ms="2" started-at="2017-03-09T21:15:38Z" finished-at="2017-03-09T21:15:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- writeSingleFileNotEnoughSpaceTest -->
        <test-method status="PASS" signature="writeSingleFileTest()[pri:0, instance:FileStorageTest@7dc36524]" name="writeSingleFileTest" duration-ms="1801" started-at="2017-03-09T21:15:38Z" finished-at="2017-03-09T21:15:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- writeSingleFileTest -->
        <test-method status="PASS" signature="isExistsTest()[pri:0, instance:FileStorageTest@7dc36524]" name="isExistsTest" duration-ms="1800" depends-on-groups="writeTest" started-at="2017-03-09T21:15:40Z" finished-at="2017-03-09T21:15:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isExistsTest -->
      </class> <!-- FileStorageTest -->
      <class name="FileTest">
        <test-method status="PASS" signature="setUp(java.lang.String, java.lang.String)[pri:0, instance:FileTest@7d417077]" name="setUp" is-config="true" duration-ms="11" started-at="2017-03-09T21:15:36Z" finished-at="2017-03-09T21:15:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[test.exe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="getAxtensionTest(File, java.lang.String)[pri:0, instance:FileTest@7d417077]" name="getAxtensionTest" duration-ms="0" started-at="2017-03-09T21:15:36Z" data-provider="files" finished-at="2017-03-09T21:15:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[File@7dc7cbad]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[rrr]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [rrr] but found [exe]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [rrr] but found [exe]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEqualsImpl(Assert.java:134)
	at org.testng.Assert.assertEquals(Assert.java:115)
	at org.testng.Assert.assertEquals(Assert.java:189)
	at org.testng.Assert.assertEquals(Assert.java:199)
	at FileTest.getAxtensionTest(FileTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAxtensionTest -->
        <test-method status="PASS" signature="getAxtensionTest(File, java.lang.String)[pri:0, instance:FileTest@7d417077]" name="getAxtensionTest" duration-ms="0" started-at="2017-03-09T21:15:36Z" data-provider="files" finished-at="2017-03-09T21:15:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[File@1753acfe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[exe]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAxtensionTest -->
        <test-method status="PASS" signature="getAxtensionTest(File, java.lang.String)[pri:0, instance:FileTest@7d417077]" name="getAxtensionTest" duration-ms="0" started-at="2017-03-09T21:15:36Z" data-provider="files" finished-at="2017-03-09T21:15:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[File@7c16905e]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[exe]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAxtensionTest -->
        <test-method status="PASS" signature="getContentTest()[pri:0, instance:FileTest@7d417077]" name="getContentTest" duration-ms="1" started-at="2017-03-09T21:15:36Z" finished-at="2017-03-09T21:15:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getContentTest -->
        <test-method status="PASS" signature="getFilename()[pri:0, instance:FileTest@7d417077]" name="getFilename" duration-ms="1" started-at="2017-03-09T21:15:36Z" finished-at="2017-03-09T21:15:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getFilename -->
        <test-method status="PASS" signature="getSizeTest()[pri:0, instance:FileTest@7d417077]" name="getSizeTest" duration-ms="0" started-at="2017-03-09T21:15:36Z" finished-at="2017-03-09T21:15:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSizeTest -->
      </class> <!-- FileTest -->
    </test> <!-- Test With Classes -->
  </suite> <!-- Suite -->
</testng-results>
